<?php

namespace app\index\controller;


use think\Controller;
use think\Db;
use think\Lang;
use verify\Verify;

class Index extends Controller
{
    private $state;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        Lang::load(APP_PATH . DS . 'lang/lang.php');
    }

    public function index()
    {
        $this->assign('step_curr', 'eula');
        $eula_html = file_get_contents(APP_PATH . DS . 'lang/xieyi.html');
        $this->assign('eula_html', $eula_html);
        if (request()->isPost()) {

            $accept = $this->request->param('accept');
            if (!$accept) {
                $error_msg = lang('please_accept');
                $this->assign('error_msg', $error_msg);
                return $this->fetch();
            } else {
                $this->redirect('check');
            }
        } else {

            return $this->fetch();
        }

    }

    /**
     * 环境检测
     */
    public function check()
    {

        $flag = true;
        //检测文件夹权限
        $check_file = [
            ROOT_PATH . 'public/uploads',
            ROOT_PATH . 'install',
            ROOT_PATH . 'public/data',
            ROOT_PATH . 'application/extra/system.php',
            ROOT_PATH . 'application/database.php',
            ROOT_PATH . 'runtime',
        ];

        $error = [];
        foreach ($check_file as $file) {
            $path_file = $file;
            if (!file_exists($path_file)) {
                $error[] = $file . lang('not_exists');
                $flag = false;
                continue;
            }
            if (!is_writable($path_file)) {
                $error[] = $file . lang('not_writable');
                $flag = false;
            }
        }
        if (!function_exists('curl_getinfo')) {
            $error[] = lang('no_curl');
            $flag = false;
        }

        if (!function_exists('gd_info')) {
            $error[] = lang('no_gd');
            $flag = false;
        }
        if (!class_exists('pdo')) {
            $error[] = lang('no_pdo');
            $flag = false;
        }


        if (!$flag) {
            $this->assign('error', $error);
            $this->assign('step_curr', 'check');
            return $this->fetch('check');
        } else {
            $this->redirect('setconf');
        }
    }


    /**
     * 网站配置
     */
    public function setconf()
    {
        $this->assign('step_curr', 'setconf');
        if (request()->isPost()) {
            $post = request()->post('', '', '');
            foreach ($post as $key => $val) {
                $this->assign($key, $val);
            }
            foreach ($post as $k => $v) {
                if (empty($v) && $k != 'db_pass') {
                    $this->assign('error_msg', lang('please_input_config_info'));
                    return $this->fetch();
                }
            }
            $verify = new Verify();

            if (!$verify::isEmail($post['admin_email'])) {
                $this->assign('error_msg', lang('admin_email_format_incorrect'));
                return $this->fetch();
            }
            if ($post['admin_pass'] != $post['admin_pass_confirm']) {
                $this->assign('error_msg', lang('admin_pass_error'));
                return $this->fetch();
            }
            //试着连接数据库

            $pdo = $this->pdoConnect($post['db_host'], $post['db_name'], $post['db_user'], $post['db_pass'], $post['db_port']);
            if ($pdo === true) {
                $path = ROOT_PATH . 'public/data/';
                $info = set_config($path, 'data.php', $post);
                if ($info === true) {
                    $this->redirect('install');
                } else {
                    $this->assign('error_msg', $info);
                    return $this->fetch();
                }

            } else {
                $this->assign('error_msg', lang('connect_mysql_error'));
                return $this->fetch();
            }

        } else {
            $this->assign('database_name_tip', lang('database_name_tip'));
            $this->assign('db_host', '127.0.0.1');
            $this->assign('db_port', '3306');
            $this->assign('db_user', 'root');
            $this->assign('db_name', '');
            $this->assign('db_prefix', 'taobao_');

            $this->assign('admin_user', 'admin');
            $this->assign('db_pass', '');
            $this->assign('admin_pass', '');
            $this->assign('admin_pass_confirm', '');
            $this->assign('admin_email', '');
            return $this->fetch();
        }
    }

    /**
     * 开始安装
     */
    public function install()
    {
        $this->assign('step_curr', 'install');
        return $this->fetch();
    }


    /**
     * 执行安装
     */
    public function finish_done()
    {
        $charset = 'utf8';
        header('Content-type:text/html;charset=' . $charset);
        $temp_info = include ROOT_PATH . 'public/data/data.php';
        $conn = Db::connect("mysql://{$temp_info['db_user']}:{$temp_info['db_pass']}@{$temp_info['db_host']}:{$temp_info['db_port']}/{$temp_info['db_name']}#{$charset}");


        $this->_show_process(lang('create_table_begin'));
        $sqls = $this->_get_sql(ROOT_PATH . 'data_sql/data.sql');

        foreach ($sqls as $sql) {
            $sql = str_replace('`taobao_', '`' . $temp_info['db_prefix'], $sql);
            $info = $conn->execute($sql);
            if (substr($sql, 0, 12) == 'CREATE TABLE') {
                $table_name = $temp_info['db_prefix'] . preg_replace("/CREATE TABLE `" . $temp_info['db_prefix'] . "([a-z0-9_]+)` .*/is", "\\1", $sql);
                $this->_show_process(sprintf(lang('create_table_successed'), $table_name));
            }
        }
        $data = [
            'username' => $temp_info['admin_user'],
            'password' => md5($temp_info['admin_pass']),
            'email' => $temp_info['admin_email']

        ];
        $res = $conn->table($temp_info['db_prefix'] . 'admin')->insert($data);
        if ($res) {
            $this->_show_process('管理员信息写入成功');
        } else {
            $this->_show_process('管理员信息写入失败，请重新再试');
        }

        //修改配置文件
        $config_file = include ROOT_PATH . 'application/database.php';

        $config_file['hostname'] = $temp_info['db_host'];
        $config_file['database'] = $temp_info['db_name'];
        $config_file['username'] = $temp_info['db_user'];
        $config_file['password'] = $temp_info['db_pass'];
        $config_file['hostport'] = $temp_info['db_port'];
        $config_file['prefix'] = $temp_info['db_prefix'];
        $path = ROOT_PATH . 'application/';
        $info = set_config($path, 'database.php', $config_file);
        if ($info === true) {
            $this->_show_process('数据库信息写入成功！');
        } else {
            $this->_show_process('数据库信息写入失败，错误信息：' . $info);
        }

        //安装完毕
        $this->_show_process(lang('install_successed'), 'parent.install_successed();');
        return false;
    }

    public function finish()
    {
        $this->assign('step_curr', 'finish');
        touch(ROOT_PATH . 'install/install.lock');
        return $this->fetch();
    }


    /**
     * @param $msg
     * @param string $script
     * 显示安装进程
     */
    private function _show_process($msg, $script = '')
    {
        echo '<script type="text/javascript">parent.show_process(\'<p><span>' . $msg . '</span></p>\');' . $script . '</script>';
        flush();
        ob_flush();
    }


    /**
     * @param $hostname 数据库主机名
     * @param $database 使用的数据库
     * @param $username 数据库连接用户名
     * @param $password 对应的密码
     * @param int $port 数据库端口
     * @param string $type 数据库类型
     * @return 返回
     */
    private function pdoConnect($hostname, $database, $username, $password, $port = 3306, $type = 'mysql')
    {
        $dsn = "$type:host=$hostname;port=$port;dbname=$database";
        try {
            $pdo = new \PDO($dsn, $username, $password); //初始化一个PDO对象
            $pdo->exec('set names utf8');
            $this->state = true;
            return true;

        } catch (\PDOException $e) {
            $this->state = false;
            return $e->getMessage();
            //die ("Error!: " . $e->getMessage() . "<br/>");
        }


    }

    private function _get_sql($sql_file)
    {
        $contents = file_get_contents($sql_file);
        $contents = str_replace("\r\n", "\n", $contents);
        $contents = trim(str_replace("\r", "\n", $contents));
        $return_items = $items = array();
        $items = explode(";\n", $contents);
        foreach ($items as $item) {
            $return_item = '';
            $item = trim($item);
            $lines = explode("\n", $item);
            foreach ($lines as $line) {
                if (isset($line[1]) && $line[0] . $line[1] == '--') {
                    continue;
                }
                $return_item .= $line;
            }
            if ($return_item) {
                $return_items[] = $return_item; //.";";
            }
        }
        return $return_items;
    }


}
