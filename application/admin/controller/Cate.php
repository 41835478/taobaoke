<?php
/** .-------------------------------------------------------------------
 * |    Software: []
 * | Description:
 * |        Site: www.jechorn.cn
 * |-------------------------------------------------------------------
 * |      Author: 王志传
 * |      Email : <jechorn@163.com>
 * |  CreateTime: 2017/6/13-9:56
 * | Copyright (c) 2016-2019, www.jechorn.cn. All Rights Reserved.
 * '-------------------------------------------------------------------*/

namespace app\admin\controller;
use app\admin\common\Base;
use think\Db;
use think\Validate;

class Cate extends Base
{
    private  $cateModel;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->cateModel = new \app\admin\model\Cate();
    }

    public function index()
    {
        $cur = $this->request->param('page', 1, 'intval');
        $total = $this->cateModel->cateCount();
        $page = ceil($total/config('paginate.list_rows'));
        if($cur >$page){
            $cur = $page;
        }elseif ($cur < 1){
            $cur = 1;
        }
        $info = [];
        if($total > 0){
            $info = $this->cateModel->getCate('',$cur);
        }
        $this->assign('cateList',$info);
        $this->assign('pageInfo',['page'=>$page,'cur'=>$cur,'total'=>$total]);
        return $this->fetch();
    }

    public function add()
    {
        $taobaoCategory = $this->getCategory();
        $this->assign('taobaoCategory',$taobaoCategory);
        return $this->fetch();
    }

    public function addHandle()
    {
        $this->jump();
        $data = $this->request->param('','','htmlspecialchars');
        $data['cate_status'] = isset($data['cate_status']) ? $data['cate_status'] : 0;
        $rules = [
            'cate_sort|分类排序' =>'require|integer|egt:0|lt:30000',
            'cate_status' =>'in:0,1',
            'cate_tags|分类标签' =>'require|max:80',
            'cate_icon|分类图标'=>'require|max:30',
            'taobao_category|所属淘宝分类'=>'require'

        ];
        $msg =[
            'cate_status.in'=>'是否展示页面非法取值',
            'cate_sort.integer'=>'分类排序必须是非负整数，不能大于3000',
            'cate_sort.egt'=>'分类排序必须是非负整数，不能大于3000',
            'cate_sort.lt'=>'分类排序必须是非负整数，不能大于3000',
            'cate_name.unique'=>'分类名称已存在'
        ];
        if (!isset($data['cate_id'])){
            $rules = array_merge($rules,['cate_name|分类名称' =>'require|length:2,8|unique:cate']);
        }else {
            $rules = array_merge($rules,['cate_name|分类名称' =>'require|length:2,8']);
        }
        $validate = new Validate($rules,$msg);
        if (!$validate->check($data)){
            return json([
               'status'=>'error',
                'errorMsg' =>$validate->getError()
            ]);
        }
        $addData =[
            'cate_name'=>$data['cate_name'],
            'tags'=>$data['cate_tags'],
            'sort'=>$data['cate_sort'],
            'status'=>$data['cate_status'],
            'icon'=>$data['cate_icon'],
            'taobao_category' =>$data['taobao_category']

        ];
        if (!isset($data['cate_id'])){
            $info = $this->cateModel->insertCate($addData);
            $title = '分类添加';

        }else{
            $addData['id'] = $data['cate_id'];
            $title = '分类修改';
            $info = $this->cateModel->updateCate($addData);

        }
        if ($info) {
            return json([
                'status'=>'ok',
                'errorMsg' =>''
            ]);
        }else{
            return json([
                'status'=>'ok',
                'errorMsg' =>$title.'失败'
            ]);
        }



    }

    public function cateShow()
    {
        $this->jump();
        $data = $this->request->post('','','intval');
        if (empty($data['id']) ||!in_array($data['status'],[0,1])){
            return json([
                'status' => 'error',
                'errorMsg' => '请检查字段的合法性'
            ]);
        }
        $data['status'] = ($data['status'] == 1) ? 0 : 1;
        $info = $this->cateModel->setStatus($data);
        if ($info) {
            return json([
                'status' => 'ok',
                'errorMsg' => ''
            ]);
        }else{
            return json([
                'status' => 'error',
                'errorMsg' => '数据没被修改'
            ]);
        }

    }

    public function delete()
    {
        $this->jump();
        $id = $this->request->param('id','','intval');
        $info = Db::name('cate')->where(['id'=>$id])->delete();
        if ($info){
            return json([
                'status' => 'ok',
                'errorMsg' => ''
            ]);
        }else{
            return json([
                'status' => 'error',
                'errorMsg' => '数据没被删除'
            ]);
        }
    }

    public function deleteAll()
    {
        $this->jump();
        $data = $this->request->param('','','intval');
        if (!empty($data['ids'])){
            $info = Db::name('cate')->delete($data['ids']);
            if ($info){
                return json([
                    'status' => 'ok',
                    'errorMsg' => ''
                ]);
            }else{
                return json([
                    'status' => 'error',
                    'errorMsg' => '数据没被删除'
                ]);
            }
        }
    }

    public function update()
    {
        $id = $this->request->param('id','','intval');
        if (empty($id)){
            $this->error('参数传递错误',url('cate/home'));
        }
        $info = Db::name('cate')->where(['id'=>$id])->find();
        if (!$info) {
            $this->error('无法找到该分类',url('cate/home'));
        }
        $this->assign('cateInfo',$info);
        $taobaoCategory = $this->getCategory();
        $this->assign('taobaoCategory',$taobaoCategory);

        return $this->fetch('add');
    }

    private function getCategory()
    {
        $fileData = include(ROOT_PATH . 'public/data/category.php');
        $taobaoCategory = [];
        foreach ($fileData as $k=>$v){
            switch ($k) {
                case 'female_clothes':
                    $value = '女装';
                    break;
                case 'male-clothes':
                    $value = '男装';
                    break;
                case 'underclothes':
                    $value = '内衣';
                    break;
                case 'cosmetics':
                    $value = '化妆品';
                    break;
                case 'baby':
                    $value = '母婴';
                    break;
                case 'home':
                    $value = '居家、日用';
                    break;
                case 'shoes':
                    $value = '鞋包、配饰';
                    break;
                case 'food':
                    $value = '美食';
                    break;
                case 'cars':
                    $value = '文体、汽车';
                    break;
                case 'camera':
                    $value = '数码、家电';
                    break;
                default:
                    $value = '其他';
                    break;
            }
            $taobaoCategory[$k] = $value;
        }
        return $taobaoCategory;
    }

}