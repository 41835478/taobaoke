<?php
/** .-------------------------------------------------------------------
 * |    Software: []
 * | Description:
 * |        Site: www.jechorn.cn
 * |-------------------------------------------------------------------
 * |      Author: 王志传
 * |      Email : <jechorn@163.com>
 * |  CreateTime: 2017/6/17-12:36
 * | Copyright (c) 2016-2019, www.jechorn.cn. All Rights Reserved.
 * '-------------------------------------------------------------------*/

namespace app\admin\controller;


use app\admin\common\Base;
use think\Db;
use think\Validate;

class Activity extends Base
{
    private  $activityModel;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->activityModel = new \app\admin\model\Activity();
    }

    public function index()
    {

        $cur = $this->request->param('page', 1, 'intval');
        $total = $this->activityModel->activityCount();
        $page = ceil($total/config('paginate.list_rows'));
        if($cur >$page){
            $cur = $page;
        }elseif ($cur < 1){
            $cur = 1;
        }
        $info = [];
        if($total > 0){
            $info = $this->activityModel->getActivity('',$cur);
        }
        $this->assign('activityList',$info);
        $this->assign('pageInfo',['page'=>$page,'cur'=>$cur,'total'=>$total]);

        return $this->fetch();
    }

    public function add()
    {
        return $this->fetch();
    }


    public function addHandle()
    {
        $this->jump();
        $data = $this->request->param('', '', 'htmlspecialchars');
        $data['activity_status'] = isset($data['activity_status']) ? $data['activity_status'] : 0;
        $data['is_qiang'] = isset($data['is_qiang']) ? $data['is_qiang'] : 0;
        $rules = [
            'activity_sort|分类排序' => 'require|integer|egt:0|lt:30000',
            'activity_status' => 'in:0,1',
            'is_qiang' => 'in:0,1',
            'start_time|活动开始时间' => 'require|date',
            'end_time|活动结束时间' => 'require|date',

        ];
        $msg = [
            'activity_status.in' => '首页页面状态值非法取值',
            'activity_sort.integer' => '分类排序必须是非负整数，不能大于3000',
            'activity_sort.egt' => '活动排序必须是非负整数，不能大于3000',
            'activity_sort.lt' => '活动排序必须是非负整数，不能大于3000',
            'activity_name.unique' => '活动名称已存在'
        ];
        if (!isset($data['activity_id'])) {
            $rules = array_merge($rules, ['activity_name|活动名称' => 'require|length:2,8|unique:activity']);
        } else {
            $rules = array_merge($rules, ['activity_name|活动名称' => 'require|length:2,8']);
        }
        $validate = new Validate($rules, $msg);
        if (!$validate->check($data)) {
            return json([
                'status' => 'error',
                'errorMsg' => $validate->getError()
            ]);
        }
        $addData = [
            'activity_name' => $data['activity_name'],
            'status' => $data['activity_status'],
            'is_qiang' => $data['is_qiang'],
            'sort' => $data['activity_sort'],
            'start_time' => $data['start_time'],
            'end_time' => $data['end_time']

        ];
        if (!isset($data['activity_id'])) {
            $info = $this->activityModel->insertActivity($addData);
            $title = '活动添加';

        } else {
            $addData['id'] = $data['activity_id'];
            $title = '活动修改';
            $info = $this->activityModel->updateActivity($addData);

        }
        if ($info) {
            return json([
                'status' => 'ok',
                'errorMsg' => ''
            ]);
        } else {
            return json([
                'status' => 'ok',
                'errorMsg' => $title . '失败'
            ]);
        }


    }


    public function update()
    {
        $id = $this->request->param('id','','intval');
        if (empty($id)){
            $this->error('参数传递错误',url('activity/home'));
        }
        $info = Db::name('activity')->where(['id'=>$id])->find();
        if (!$info) {
            $this->error('无法找到该活动',url('activity/home'));
        }
        $this->assign('activityInfo',$info);
        return $this->fetch('add');
    }



    public function delete()
    {
        $this->jump();
        $id = $this->request->param('id','','intval');
        $info = Db::name('activity')->where(['id'=>$id])->delete();
        if ($info){
            return json([
                'status' => 'ok',
                'errorMsg' => ''
            ]);
        }else{
            return json([
                'status' => 'error',
                'errorMsg' => '数据没被删除'
            ]);
        }
    }

    public function deleteAll()
    {
        $this->jump();
        $data = $this->request->param('','','intval');
        if (!empty($data['ids'])){
            $info = Db::name('activity')->delete($data['ids']);
            if ($info){
                return json([
                    'status' => 'ok',
                    'errorMsg' => ''
                ]);
            }else{
                return json([
                    'status' => 'error',
                    'errorMsg' => '数据没被删除'
                ]);
            }
        }
    }

    public function activityShow()
    {
        $this->jump();
        $data = $this->request->post('','','intval');
        if (empty($data['id']) ||!in_array($data['status'],[0,1])){
            return json([
                'status' => 'error',
                'errorMsg' => '请检查字段的合法性'
            ]);
        }
        $data['status'] = ($data['status'] == 1) ? 0 : 1;
        $info = $this->activityModel->setStatus($data);
        if ($info) {
            return json([
                'status' => 'ok',
                'errorMsg' => ''
            ]);
        }else{
            return json([
                'status' => 'error',
                'errorMsg' => '数据没被修改'
            ]);
        }

    }



}